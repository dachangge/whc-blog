(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{351:function(t,e,a){"use strict";a.r(e);var n=a(43),r=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"第一篇：-js数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一篇：-js数据类型"}},[t._v("#")]),t._v(" 第一篇： JS数据类型")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"_1-js-原始数据类型有哪些？引用数据类型有哪些？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-js-原始数据类型有哪些？引用数据类型有哪些？"}},[t._v("#")]),t._v(" 1.JS 原始数据类型有哪些？引用数据类型有哪些？")]),t._v(" "),a("p",[t._v("在 JS中， 存在7中原始类型 分别是：")]),t._v(" "),a("ul",[a("li",[t._v("boolean")]),t._v(" "),a("li",[t._v("null")]),t._v(" "),a("li",[t._v("undefined")]),t._v(" "),a("li",[t._v("number")]),t._v(" "),a("li",[t._v("string")]),t._v(" "),a("li",[t._v("symbol")]),t._v(" "),a("li",[t._v("bigint")])]),t._v(" "),a("p",[t._v("引用数据类型： 对象Object（包含普通对象-Object，数组对象-Array， 正则对象-RegExp， 日期对象-Date， 数学函数-Math， 函数对象-Function）")]),t._v(" "),a("h4",{attrs:{id:"单独说下-symbol，-将它理解成独一无二的值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单独说下-symbol，-将它理解成独一无二的值"}},[t._v("#")]),t._v(" 单独说下 Symbol， 将它理解成独一无二的值")]),t._v(" "),a("h5",{attrs:{id:"基础用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础用法"}},[t._v("#")]),t._v(" 基础用法")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    let name = Symbol('whc');\n    typeof name; // 'symbol'\n    let obj = {};\n    obj[name] = 'xhs';\n    console.log(obj[name]); // 'xhs'\n")])])]),a("h5",{attrs:{id:"api-symbol-for"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api-symbol-for"}},[t._v("#")]),t._v(" APi Symbol.for")]),t._v(" "),a("p",[t._v("这个东西是可共享，在创建的时候会检查全局是否寻在这个key的symbol.如果存在就直接返回这个symbol,如果不存在就会创建，并且在全局注册。symbol的 key 即为参数")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    let uid = Symbol.for('uid');\n    let object = {\n        [uid]: 'whc'\n    }\n    console.log( object[uid]);  // 'whc'\n    console.log(uid); //  'Symbol(uid)'\n\n    let uid2 = Symbol.for('uid');\n\n    console.log(uid === uid2);  //true\n    console.log(object[uid2]); // 'whc'\n    console.log(uid2); // 'Symbol(uid)'\n")])])]),a("h5",{attrs:{id:"api-symbol-keyfor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api-symbol-keyfor"}},[t._v("#")]),t._v(" APi Symbol.keyfor")]),t._v(" "),a("p",[t._v("获得 symbol 的 key")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("   let uid = Symbol.for('uid');\n   console.log(Symbol.keyFor(uid)); // 'uid'\n   let uid2 = Symbol.for('uid');\n   console.log(Symbol.keyFor(uid2))// 'uid'\n   let uid3 = Symbol('uid');\n   console.log(Symbol.keyFor(uid3)) // undefined\n")])])]),a("h5",{attrs:{id:"api-symbol-hasinstance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api-symbol-hasinstance"}},[t._v("#")]),t._v(" APi Symbol.hasInstance")]),t._v(" "),a("p",[t._v("相当于 "),a("code",[t._v("instanceof")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    function Xiao(){}\n    const x = new Xiao();\n    console.log(Xiao[Symbol.hasInstance](x))  // -> true\n")])])]),a("h5",{attrs:{id:"api-symbol-toprimitive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api-symbol-toprimitive"}},[t._v("#")]),t._v(" Api Symbol.toPrimitive")]),t._v(" "),a("p",[t._v("进行类型转换的时候，对象会进行尝试转换成原始类型，就是通过toPrimitive.这个方法，标准类型的原型上都存在。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    const object1 = {\n    [Symbol.toPrimitive]: function(hint) {\n        if (hint == 'number') {\n        return 42;\n        }\n        return null;\n    }\n    };\n\n    console.log(+object1);\n    // expected output: 42\n")])])]),a("h3",{attrs:{id:"说出下面运行的结果，-说出原因"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说出下面运行的结果，-说出原因"}},[t._v("#")]),t._v(" 说出下面运行的结果， 说出原因")]),t._v(" "),a("div",{staticClass:"language-javaScript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("26")]),t._v("\n        person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hzj'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            age"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" person\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" p1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fyq'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        age"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("19")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" p2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("p1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("p2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n")])])]),a("p",[t._v("结果：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    p1:   {name: 'fyq', age: 26}\n    p2:   {name: 'hzj', age: 18}\n")])])]),a("blockquote",[a("p",[t._v("原因： 在函数传参的时候传递的是对象在堆中的内存地址值，test函数中的实参person是p1对象的内存地址，通过调用person.age = 26 确实改变了p1的值，但随后person变成了另一块内存空间的地址，并且在最后将另一块内存空间的地址返回，赋值给了p2。")])]),t._v(" "),a("h3",{attrs:{id:"_3-null是对象么？-为什么？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-null是对象么？-为什么？"}},[t._v("#")]),t._v(" 3.null是对象么？ 为什么？")]),t._v(" "),a("p",[t._v("结论： null不是对象")]),t._v(" "),a("p",[t._v("解释： 虽然 typeof null 是 object， 但是这只是JS存在的一个悠久bug。在JS的最初版本中使用的是32位系统，为了性能考虑使用低位存储变量的类型信息，000开头代表是对象然而null表示为全零，所以将它错误的判断为object。")]),t._v(" "),a("h3",{attrs:{id:"_4-1-tostring（）-为什么可以调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-tostring（）-为什么可以调用"}},[t._v("#")]),t._v(" 4.'1'.toString（） 为什么可以调用")]),t._v(" "),a("p",[t._v("其实在这个语句运行的过程中做了这样几件事")]),t._v(" "),a("div",{staticClass:"language-javaScript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n")])])]),a("p",[t._v("第一步： 创建Object类实例。注意为什么不是String？ 由于Symbol和Bigint的出现，对它们调用new 都会报错，目前es6规范也不建议用new来创建基本类型的包装类。")]),t._v(" "),a("p",[t._v("第二步： 调用包装类实例对象上的方法。")]),t._v(" "),a("p",[t._v("第三步： 执行完方法立即销毁这个实例。")]),t._v(" "),a("p",[t._v("整个过程体现了"),a("code",[t._v("基本包装类型")]),t._v("的性质，而基本包装类型恰恰属于基本数据类型，包括Boolean、Number和String。")]),t._v(" "),a("blockquote",[a("p",[t._v("参考： 《javaScript高级程序设计（第三版）》 P118")])]),t._v(" "),a("h3",{attrs:{id:"_5-0-1-0-2为什么不等于0-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-0-1-0-2为什么不等于0-3"}},[t._v("#")]),t._v(" 5.0.1+0.2为什么不等于0.3")]),t._v(" "),a("p",[t._v("0.1和0.2在转换成二进制后会无限循环，由于标准位数的限制后面多余的位数会被截掉，此时就已经出现了精度损失，相加后因浮点数小数位的限制而截断的二进制数字在转换为十进制就会变成0.30000000000000004。")]),t._v(" "),a("h3",{attrs:{id:"_6-如何理解bigint？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-如何理解bigint？"}},[t._v("#")]),t._v(" 6.如何理解Bigint？")]),t._v(" "),a("h4",{attrs:{id:"什么是bigint？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是bigint？"}},[t._v("#")]),t._v(" 什么是Bigint？")]),t._v(" "),a("blockquote",[a("p",[t._v("Bigint是一种新的数据类型，用于当整数值超过Number数据支持的范围时。这种数据类型允许我们安全地对"),a("code",[t._v("大整数")]),t._v("执行算数操作，表示高分辨率的时间戳、使用大整数id，等等，都不用再引入第三方库。")])]),t._v(" "),a("h4",{attrs:{id:"为什么需要bigint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要bigint"}},[t._v("#")]),t._v(" 为什么需要BigInt?")]),t._v(" "),a("p",[t._v("在JS中，所有的数字都以双精度64位浮点数格式表示，那这样会带来什么问题呢？\n其中 第一位 表示 正负值， 2 -12表示指示部分， 13-64 小数部分（共52位，为有效部分）.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  1 === 1.0 // ->所有的数字都是浮点数\n")])])]),a("p",[t._v("这也表示JS中的Number无法精确表示非常大的整数，它会将非常大的整数四舍五入，确切地说，JS中的Number类型只能安全表示-9007199254740991(-(2^53-1))和9007199254740991（(2^53-1)），任何超出此范围的整数值都可能失去精度。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    console.log(9999999999999999999)   // 10000000000000000000\n")])])]),a("p",[t._v("同时也会有一定的安全性问题")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    9007199254740992 === 9007199254740993;    // → true 居然是true!\n")])])]),a("h4",{attrs:{id:"如何创建并使用bigint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何创建并使用bigint"}},[t._v("#")]),t._v(" 如何创建并使用Bigint")]),t._v(" "),a("p",[t._v("要创建Bigint，只需要在数字后面追加n即可。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    console.log(9007199254740995n) // 9007199254740995n\n    console.log(9007199254740995) // 9007199254740996\n")])])]),a("p",[t._v("另一种创建Bigint的方式是用Bigint的构造函数")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    Bigint("9007199254740995") // 9007199254740995n\n')])])]),a("p",[t._v("简单使用如下:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    10n + 20n // 30n\n    10n - 20n // -10n\n    +10n // TypeError: Cannot convert a BigInt value to a number\n    -10n // -10n\n    10n * 20n // 200n\n    20n / 10n //2n\n    23n % 10n // 3n\n    10n ** 3n // 1000n\n    \n    const x = 10n;\n    ++x // 11n\n    --x //9n\n    console.log(typeof x);   //"bigint"\n')])])]),a("h4",{attrs:{id:"值得警惕的点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#值得警惕的点"}},[t._v("#")]),t._v(" 值得警惕的点")]),t._v(" "),a("p",[t._v("1.Bigint不支持一元加号运算符， 这可能是某些程序可能依赖于 + 始终生成Number的不变量，或者抛出异常。")]),t._v(" "),a("p",[t._v("2.因为使用隐式转换可能丢失信息，所以不允许Bigint和Number混合操作。当混合使用Bigint和浮点数时，结果值可能无法由Bigint或Number精确表示。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    10 + 10n; // -> TypeError\n")])])]),a("p",[t._v("3.不能将Bigint传递给Web Api 和内置的js函数，这些函数需要一个Number类型的数字。尝试这样做会报 TypeError。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    Math.max(10n, 2n,30n)  // -> TypeError\n")])])]),a("p",[t._v("4.当Boolean和Bigint相遇时，Bigint的处理方式和Number类似。只要不是0n，Bigint就视为true。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    if(0n){// false\n\n    }\n    if(3n){// true\n\n    }\n")])])]),a("p",[t._v("5.元素都为Bigint的数组也可以进行sort。")]),t._v(" "),a("p",[t._v("6.Bigint可以正常地进行位运算。 如|、&、<<、>>、和^")]),t._v(" "),a("h4",{attrs:{id:"浏览器兼容性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器兼容性"}},[t._v("#")]),t._v(" 浏览器兼容性")]),t._v(" "),a("p",[t._v("caniuse的结果：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/22/16df110a69c0ae17?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"Bigint浏览器兼容性"}})]),t._v(" "),a("p",[t._v("其实兼容性并不怎么好，只有 chrome67、firefox、opera这些主流支持， 要想正式成为规范，其实还有很长的路要走。")]),t._v(" "),a("h3",{attrs:{id:"第二篇：-js数据类型之问-检测篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二篇：-js数据类型之问-检测篇"}},[t._v("#")]),t._v(" 第二篇： JS数据类型之问————检测篇")]),t._v(" "),a("hr"),t._v(" "),a("h4",{attrs:{id:"_1-typeof-能否正确判断类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-typeof-能否正确判断类型"}},[t._v("#")]),t._v(" 1.typeof 能否正确判断类型")]),t._v(" "),a("p",[t._v("对于原始类型来说，除了null 都能调用typeof 显示正确的类型。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    typeof 1;   // 'number'\n    typeof '1'; // 'string'\n    typeof undefined; // 'undefined'\n    typeof true; // 'boolean'\n    typeof Symbol() // 'symbol'\n    typeof 1n; // 'bigint'\n")])])]),a("p",[t._v("对于引用类型来说， 除了函数之外都会显示 'object'")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    typeof {} // -> 'object'\n    typeof [] // -> 'object'\n    typeof function() {}  // -> 'function'    \n    typeof new Date()  // -> 'object'\n    typeof new RegExp() // -> 'object'\n")])])]),a("p",[t._v("因此采用采用 "),a("code",[t._v("typeof")]),t._v(" 判断 引用数据类型 是不准确的， 采用instanceof 会 更好， instanceof 的原理 基于原型链的查询， 只要处于 原型链中， 判断永远为 true")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    function Person () {}\n    const person = new Person();\n    person instanceof Person ;  // -> true\n\n    let str1 = 'hello world';\n    str1 instanceof String; // -> false\n\n    let str2 = new String('hello world');\n    str2 instanceof String; // -> true\n")])])]),a("h4",{attrs:{id:"_2-indtanceof能否判断基础类型？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-indtanceof能否判断基础类型？"}},[t._v("#")]),t._v(" 2.indtanceof能否判断基础类型？")]),t._v(" "),a("p",[t._v("能， 比如下面这种方式")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    class PrimitiveNumber {\n        static [Symbol.hasInstance](x) {\n            return typeof x === 'number'\n        }\n    }\n    console.log(111 instanceof PrimitiveNumber);\n")])])]),a("p",[t._v("链接： "),a("a",{attrs:{href:"'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance',",title:"title"}},[t._v("MDN 上关于 hasInstance 的解释")])]),t._v(" "),a("p",[t._v("其实就是自定义instanceof行为的一种方式，这里将原有的instanceof方法重定义，换成了typeof，因此能够判断基本数据类型。")]),t._v(" "),a("h4",{attrs:{id:"_3-能不能手动实现一下-instanceof-的-功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-能不能手动实现一下-instanceof-的-功能"}},[t._v("#")]),t._v(" 3.能不能手动实现一下 instanceof 的 功能?")]),t._v(" "),a("p",[t._v("核心： 原型链的向上查询。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    function myInstanceof (left, right){\n        if(typeof left !== 'object' || left === null){\n            throw new Error(\"传入的内容必须是引用类型\");\n        }\n        let proto = Object.getPrototypeOf(left);\n        while(true){\n            if(proto === null){\n                return false;\n            }\n            if(proto === right.prototype){\n                return true\n            }\n            proto = Object.getPrototypeOf(proto);\n        }\n    }\n")])])]),a("p",[t._v("测试：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    console.log(myInstanceof('left', String))  // -> Error\n    console.log(new String('left', String))   // -> true\n    console.log(new Object(), String)   // -> false\n")])])]),a("h4",{attrs:{id:"_4-object-is-和-的区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-object-is-和-的区别？"}},[t._v("#")]),t._v(" 4.Object.is 和 === 的区别？")]),t._v(" "),a("p",[a("code",[t._v("Obejct.is")]),t._v(" 在严格等于的基础上修改了一些特殊情况下的失误，具体来说就是+0 和 -0 ，NaN和NaN；")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    function is () {\n        //运行到1/x === 1/y的时候x和y都为0，但是1/+0 = +Infinity， 1/-0 = -Infinity, 是不一样的\n        if(x === y){\n            return x!== 0 || y !== 0 || 1/x === 1/y;\n        }\n        else {\n            //NaN===NaN是false,这是不对的，我们在这里做一个拦截，x !== x，那么一定是 NaN, y 同理\n            //两个都是NaN的时候返回true\n            reutrn x !== x && y !== y;\n        }\n    }\n")])])]),a("h3",{attrs:{id:"_3-第三篇：js数据类型之问-转换篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-第三篇：js数据类型之问-转换篇"}},[t._v("#")]),t._v(" 3.第三篇：JS数据类型之问————转换篇")]),t._v(" "),a("h4",{attrs:{id:"_1-结果是什么？-为什么？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-结果是什么？-为什么？"}},[t._v("#")]),t._v(" 1. [] == ![] 结果是什么？ 为什么？")]),t._v(" "),a("p",[t._v("解析：\n== 中， 左右两边需要解析成数字，然后进行比较。\n左侧： [] 转换成数字为 0\n左侧： ![] 先转化成布尔值，[]作为引用类型 先转化成 true， ![]为 false， 再转化成boolean 为0；")]),t._v(" "),a("p",[t._v("0 == 0 ，结果为 true；")]),t._v(" "),a("h4",{attrs:{id:"_2-js中的类型转换有几种？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-js中的类型转换有几种？"}},[t._v("#")]),t._v(" 2.JS中的类型转换有几种？")]),t._v(" "),a("p",[t._v("JS中，类型转换只有三种：")]),t._v(" "),a("ul",[a("li",[t._v("转换成数字")]),t._v(" "),a("li",[t._v("转换成布尔值")]),t._v(" "),a("li",[t._v("转换成字符串")])]),t._v(" "),a("p",[t._v("具体转换规则如下：")]),t._v(" "),a("blockquote",[a("p",[t._v("注意’Boolean、Symbol、Function‘转字符串， 结果显示是 true 转 布尔的例子结果。")])]),t._v(" "),a("p",[t._v("![类型转换图](https://user-gold-cdn.xitu.io/2019/10/20/16de9512eaf1158a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1）")]),t._v(" "),a("h4",{attrs:{id:"_3-和-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-和-有什么区别"}},[t._v("#")]),t._v(" 3.==和===有什么区别")]),t._v(" "),a("blockquote",[a("p",[t._v("===叫做严格相等，是指：左右两边不仅要值相等，还要类型相等。比如： ’1‘ === 1，结果是false， 因为一个是Number， 一个是 String。")])]),t._v(" "),a("p",[t._v("== 不像 === 那样严格， 一般情况下，只要值相等，就返回 true，但 == 还涉及到一些类型转换， 它的转换规则如下：")]),t._v(" "),a("ul",[a("li",[t._v("两边类型是否相等， 相等的话就比较值得大小，例如  1 == 2, false")]),t._v(" "),a("li",[t._v("判断的是否是null 和 undefined， 是的话返回 true")]),t._v(" "),a("li",[t._v("判断的类型是否是String 和 Number， 是的话 把String转化成Number再进行比较")]),t._v(" "),a("li",[t._v("判断其中一方是否是Boolean， 是的话，把Boolean转化成Number再进行比较")]),t._v(" "),a("li",[t._v("如果其中一方是Object，另一方是String、Number、Symbol，把 Object先转换成 String，再进行比较。")]),t._v(" "),a("li",[t._v("如果两个操作数都是对象，则比较它们是不是同一个对象，如果两个操作数都指向同一个对象，则相等操作符返回 true；否则， 返回false")]),t._v(" "),a("li",[t._v("如果一个操作数是对象，另一个操作数不是，则调用对象的valueOf()方法，用得到的基本类型值按照前面的规则进行比较，如果对象没有valueOf()方法，则调用 toString()")]),t._v(" "),a("li",[t._v("如果有一个操作数是NaN，则相等操作符返回 false")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    console.log({a: 1} == true) ; // -> false\n    console.log({a: 1} == '[object object]'); // -> true\n    console.log([] == ![]); // -> true\n    console.log({} == !{}); // -> false\n")])])]),a("p",[t._v("相关链接： "),a("a",{attrs:{href:"'https://blog.csdn.net/magic_xiang/article/details/83686224',",title:"title"}},[t._v("运用例子")])]),t._v(" "),a("h4",{attrs:{id:"对象转原始类型是根据什么流程运行的？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象转原始类型是根据什么流程运行的？"}},[t._v("#")]),t._v(" 对象转原始类型是根据什么流程运行的？")]),t._v(" "),a("p",[t._v("对象转原始类型时，会调用内置的[toPrimitive]函数，其逻辑如下：")]),t._v(" "),a("ol",[a("li",[t._v("如果存在Symbol.toPrimitive函数，优先调用并返回。")]),t._v(" "),a("li",[t._v("调用valueOf()，如果返回值为原始类型，返回")]),t._v(" "),a("li",[t._v("调用toString(), 如果返回值为原始类型，返回")]),t._v(" "),a("li",[t._v("如果都没返回原始类型， 会报错")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    var obj = {\n        valueof() {\n            reutrn 5;\n        },\n        toString() {\n            return '6';\n        },\n        [Symbol.toprimitive](){\n            reutrn 7\n        }\n    }\n    console.log(obj + 1) // -> 8\n")])])]),a("h4",{attrs:{id:"如何让-a-1-a-2成立？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何让-a-1-a-2成立？"}},[t._v("#")]),t._v(" 如何让 a ==1 && a == 2成立？")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    var a = {\n        value: 1,\n        valueOf() {\n            return this.value++\n        }\n    }\n    console.log( a== 1 && a == 2) // -> true\n")])])]),a("h3",{attrs:{id:"第三篇：谈谈你对闭包的理解。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三篇：谈谈你对闭包的理解。"}},[t._v("#")]),t._v(" 第三篇：谈谈你对闭包的理解。")]),t._v(" "),a("h4",{attrs:{id:"什么是闭包？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是闭包？"}},[t._v("#")]),t._v(" 什么是闭包？")]),t._v(" "),a("blockquote",[a("p",[t._v("红宝书（p178）上对于闭包的定义： 闭包是指有权访问另一个函数作用域中的变量的函数。")])]),t._v(" "),a("blockquote",[a("p",[t._v("MDN 对 闭包的定义： 闭包是指那些能够访问自由变量的函数。（其中自由变量，指在函数中使用的，但既不是函数参数arguments也不是函数的局部变量的变量，其实就是另外一个函数作用域中的变量。）")])]),t._v(" "),a("h4",{attrs:{id:"闭包产生的原因？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#闭包产生的原因？"}},[t._v("#")]),t._v(" 闭包产生的原因？")]),t._v(" "),a("p",[t._v("首先要明白作用域的概念， 其实在ES5中只存在2中作用域————全局作用域和函数作用域，"),a("code",[t._v("当访问一个变量时，解释器首先会在当前作用域查找标识符，如果没有找到，就去父作用域找，直到找到该变量的标识符或者不在父作用域中，这就是作用域链")]),t._v(",值得注意的是每个子函数都会拷贝上级的作用域，形成一个作用域的链条，比如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    var a = 1;\n    function f1() {\n        var a = 2;\n        function f2(){\n            var  a =3;\n            console.log(a)\n        } \n    }\n")])])]),a("p",[t._v("在这段代码中，f1的作用域指向有全局作用域(window)和它本身，而f2的作用域指向全局作用域(window)、f1和它本身。而且作用域是从最底层向上找，直到找到全局作用域window为止，如果全局还没有的话就会报错。就这么简单一件事情！")]),t._v(" "),a("p",[t._v("闭包产生的本质 就是 当前作用域存在指向父级作用域的引用。还是举上面的例子：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    function f1() {\n        var  a = 2;\n        function f2() {\n            console.log(a);\n        }\n        return f2;\n    }\n    var x = f1();\n    x();\n")])])]),a("p",[t._v("这里x会拿到父级作用域f1中的变量，输出2.因为在当前作用域中，含有对f2的引用，而f2恰恰引用了window、f1、f2的作用域。")]),t._v(" "),a("p",[t._v("那是不是只有返回了函数才能产生闭包？")]),t._v(" "),a("p",[t._v("回到闭包的本质，只要当前作用域存在指向父级作用域的引用存在即可。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    var f2;\n    function f1() {\n        var a = 1;\n        f2 = function(){\n            console.log(a);\n        }\n    }\n    f1();\n    f2();\n")])])]),a("p",[t._v("让f1执行，给f2赋值后，等于说现在f2拥有了window、f1和f3本身这几个作用域的访问权限，还是自底向上查找，最近是在f1中找到了a,因此输出1。")]),t._v(" "),a("p",[t._v("在这里是外面的变量f2存在着父级作用域的引用，因此产生了闭包，形式变了，本质没有改变。")]),t._v(" "),a("h4",{attrs:{id:"闭包有哪些表现形式？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#闭包有哪些表现形式？"}},[t._v("#")]),t._v(" 闭包有哪些表现形式？")]),t._v(" "),a("p",[t._v("明白了本质之后，我们来看看，真实的场景：")]),t._v(" "),a("ol",[a("li",[t._v("作为一个函数返回， 上边的例子")]),t._v(" "),a("li",[t._v("作为函数参数传递")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    var a = 1;\n    function f00(){\n        var a = 2;\n        funtion f003(){\n            console.log(a); // -> 2\n        }\n        f002(f003);\n    }\n    function f002(fn) {\n        fn();\n    }\n    f00();\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("在定时器、事件监听、ajax请求、跨窗口通信、Web Workers或者热河异步中，只要使用了回调函数，实际上就是在使用闭包。")])]),t._v(" "),a("p",[t._v("以下的闭包，保存的仅仅是window和当前作用域。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    // 定时器\n    setTimeout(function() {\n        console.log('111')\n    },100)\n\n    // 事件监听\n    $('#app').click(function() {\n        console.log('DOM click');\n    })\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[t._v("IIFE(立即执行函数表达式)创建闭包，保存了"),a("code",[t._v("全局作用域window")]),t._v("和"),a("code",[t._v("当前函数的作用域")]),t._v(",因此可以使用全局变量。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    var a = 2;\n    (function(){\n        console.log(a) // -> 2\n    })()\n")])])]),a("p",[t._v("如何解决下面的循环输出问题？")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    for(var i = 1; i < 5; i ++){\n        setTimeOut(function() {\n            console.log(i);\n        })\n    }\n")])])]),a("p",[t._v("为什么会全部输出6？ 如何改进，让它输出 1，2，3，4，5？")]),t._v(" "),a("p",[t._v("因为setTimeout是宏任务， 而JS是单线程 event loop机制， 在主线程上的同步任务执行完成之后才会去执行宏任务，因此循环结束后，setTimeout的回调才会一次执行，但输出的i在回调函数的作用域上没有， 所以往上级找，终于发现了i，此事循环已经结束，i的值为6.")]),t._v(" "),a("p",[t._v("解决方法：")]),t._v(" "),a("ol",[a("li",[t._v("利用 IIFE， 当每次循环执行时，把 i做为参数 传入到定时器中。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    for(var i =1; i < 5; i++){\n        (function(j){\n            setTimeout(function(){\n                console.log(j)\n            })\n        })(i)\n    }\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("给定时器传入第三个参数，作为setTimeout的回调的第一个参数")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    for(var i = 1; i < 5; i ++){\n        setTimeout(function(j){\n            console.log(j);\n        }, 0, i)\n    }\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("使用ES6中的let")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    for(let i = 0; i < 5; i ++){\n        setTimeout(function() {\n            consle.log(i)\n        })\n    }\n")])])]),a("p",[t._v("let使JS发生革命性的变化，让JS从函数作用域变成了块级作用域，用let后作用域链不复存在。代码的作用域以块级为单位，以上的代码可视为：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    // i = 1\n    {\n        setTimeout(function() {\n            console.log(1)\n        })\n    }\n    // i =2\n    {\n        setTimeout(function() {\n            console.log(2)\n        })\n    }\n    // i =3\n    {\n        setTimeout(function() {\n            console.log(3)\n        })\n    }\n    ...\n")])])]),a("p",[t._v("因此能输出正确的结果")]),t._v(" "),a("h3",{attrs:{id:"第五篇：谈谈你对原型链的理解。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第五篇：谈谈你对原型链的理解。"}},[t._v("#")]),t._v(" 第五篇：谈谈你对原型链的理解。")]),t._v(" "),a("h4",{attrs:{id:"_1-原型对象和构造函数有何关系？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-原型对象和构造函数有何关系？"}},[t._v("#")]),t._v(" 1.原型对象和构造函数有何关系？")]),t._v(" "),a("p",[t._v("在javaScript中， 当每当创建一个函数数据类型时（函数、类），都会天生自带一个prototype属性，这个属性指向函数的原型对象。")]),t._v(" "),a("p",[t._v("当函数经过new调用之后，这个函数就成了构造函数，返回一个新的实例对象。这个实例对象有一个__proto__,该属性指向构造函数的原型对象。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/20/16de955a81892535?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"原型对象图解"}})]),t._v(" "),a("h4",{attrs:{id:"_2-能不能描述下原型链？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-能不能描述下原型链？"}},[t._v("#")]),t._v(" 2.能不能描述下原型链？")]),t._v(" "),a("p",[t._v("JavaScript对象通过Prototype指向父类对象，直到指向Object为止，这样就形成了一个原型指向的链条，即原型链。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/20/16de955ca89f6091?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"原型链图解"}})]),t._v(" "),a("ul",[a("li",[t._v("对象的hasOwnProperty用来判断自身对象时候拥有属性")]),t._v(" "),a("li",[t._v("使用in检查对象是否拥有摸个属性时，如果对象中没有，但是原型链中有，也会返回true")])]),t._v(" "),a("h3",{attrs:{id:"第六篇：-js如何实现继承？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第六篇：-js如何实现继承？"}},[t._v("#")]),t._v(" 第六篇： JS如何实现继承？")]),t._v(" "),a("h4",{attrs:{id:"第一种：借助call"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一种：借助call"}},[t._v("#")]),t._v(" 第一种：借助Call")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    function Parent1() {\n        this.name = 'parent1';\n    }\n\n    function Child1() {\n        Parent1.call(this);\n        this.type = 'child1';\n    }\n    \n    console.log(new Child1());\n")])])]),a("p",[t._v("这样写 虽然能拿到父类中的属性值，但是无法拿到父类原型对象中的 方法。")]),t._v(" "),a("h4",{attrs:{id:"第二种：借助原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二种：借助原型链"}},[t._v("#")]),t._v(" 第二种：借助原型链")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    function Parent2() {\n        this.name = 'parent2';\n        this.play = [1,2,3];\n    }\n    function Child2() {\n        this.type = 'child2';\n    }\n    Child2.prototype = new Parent2();\n")])])]),a("p",[t._v("这样 看似没有有问， 父类中的属性和方法都能得到，但是存在一个不足。如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    var c1 = new Child2();\n    var c2 = new Child2();\n    c1.play.push(4);\n    console.log(c2.play)    // -> [1,2,3,4]\n")])])]),a("p",[t._v("所有 Child2的实例 共享一个原型对象。")]),t._v(" "),a("h4",{attrs:{id:"第三种：-将前两种方法结合。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三种：-将前两种方法结合。"}},[t._v("#")]),t._v(" 第三种： 将前两种方法结合。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    function Parent3() {\n        this.name = 'parent3';\n        this.play = [1,2,3];\n    }\n\n    function Child3() {\n        Parent3.call(this);\n        this.type = 'child3';\n    }\n    Child3.prototype = new Parent3();\n\n    var c1 = new Child3();\n    var c2 = new Child3();\n    c1.play.push(4);\n    console.log(c1, c2);  // -> [1,2,3,4], [1,2,3]\n")])])]),a("p",[t._v("之前的问题都没了， 产生的新问题是  Parent3 的构造函数 多调用了一次。")]),t._v(" "),a("h4",{attrs:{id:"第四种：-组合继承的优化1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第四种：-组合继承的优化1"}},[t._v("#")]),t._v(" 第四种： 组合继承的优化1")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    function Parent4() {\n        this.name = 'parent4';\n        this.play = [1,2,3];\n    }\n\n    function Child4() {\n        Parent4.call(this);\n        this.type = 'child4';\n    }\n\n    Child4.proototype = Parent4.protype;\n")])])]),a("p",[t._v("直接将 父类的原型对象赋值给子类的原型对象，父类的构造函数只执行一次，方法和属性都能访问。 问题是输出 Child4的实例对象的时候， 会发现 它的构造函数 __proto__的constructor 指向的是 Parent4；")]),t._v(" "),a("h4",{attrs:{id:"第五种（最推荐使用）：组合继承优化2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第五种（最推荐使用）：组合继承优化2"}},[t._v("#")]),t._v(" 第五种（最推荐使用）：组合继承优化2")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    function Parent5() {\n        this.name = 'parent5';\n        this.paly = [1,2,3];\n    }\n\n    function Child5() {\n        Parent5.call(this);\n        this.type = 'child5';\n    }\n\n    Child5.prototype = Object.create(Parent5.prototype);\n    Child5.prototype.constructor = Child5; \n")])])]),a("p",[t._v("这是最推荐的实现继承方式，也叫 寄生组合继承。")]),t._v(" "),a("h3",{attrs:{id:"第七篇：函数的arguments为什么不是数组？如何转化成数组？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第七篇：函数的arguments为什么不是数组？如何转化成数组？"}},[t._v("#")]),t._v(" 第七篇：函数的arguments为什么不是数组？如何转化成数组？")]),t._v(" "),a("p",[t._v("因为arguments并不拥有数组方法，它是另一种对象类型，只不过属性从0开始排，0、1、2...最后还有callee和length属性。我们把这样的对象类型称为类数组。")]),t._v(" "),a("p",[t._v("常见的类数组还有：")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("用getElementByTagName/ClassName获得的HTMLcollection")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("用querySelect 获得的nodeList")])])])]),t._v(" "),a("p",[t._v("这导致很多数组的方法，它们都不能用，所以必要时候要把它们转为数组：")]),t._v(" "),a("h4",{attrs:{id:"_1-array-prototype-slice-call"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-array-prototype-slice-call"}},[t._v("#")]),t._v(" 1.Array.prototype.slice.call();")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    function sum(){\n        let args = Array.prototype.slice.call(arguments);\n        return args.reduce((sum,cur) => sum + cur);\n    }\n    sum(2,3)  // -> 5\n")])])]),a("h4",{attrs:{id:"_2-array-from"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-array-from"}},[t._v("#")]),t._v(" 2.Array.from()")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    function sum() {\n        let args = Array.from(arguments);\n        return args.reduce((sum,cur) => sum + cur);\n    }\n    sum(2,3) // -> 5\n\n")])])]),a("p",[t._v("Array.from 同时也可以将 Set\\Map 转化成 Array.")]),t._v(" "),a("h4",{attrs:{id:"_3-es6展开运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-es6展开运算符"}},[t._v("#")]),t._v(" 3.ES6展开运算符")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    functino sum() {\n        let args = [...arguments];\n        return args.reduce((sum,cur) => sum,cur);\n    }\n    sum(2,3) // -> 5\n")])])]),a("h4",{attrs:{id:"_4-array-prototype-concat-call-arguments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-array-prototype-concat-call-arguments"}},[t._v("#")]),t._v(" 4.Array.prototype.concat.call([], arguments)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    functino sum() {\n        let args = Array.prototype.caoncat.call([], arguments);\n        return args.reduce((sum, cur) => sum + cur);\n    }\n\n    sum(2,3)   // -> 5\n")])])]),a("h3",{attrs:{id:"第七篇：-foreach中return有效果么？如何终端foreach？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第七篇：-foreach中return有效果么？如何终端foreach？"}},[t._v("#")]),t._v(" 第七篇： forEach中return有效果么？如何终端forEach？")]),t._v(" "),a("p",[t._v("在forEach中用return不会立即返回，函数会跳过本次循环继续执行。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    let nums = [1,2,3];\n    nums.forEach(num => {\n        if(num === 1)\n            return\n        console.log(num);\n    })\n    // 2,3\n")])])]),a("p",[t._v("中断方法：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("使用try监听代码块,在需要中断的地方抛出错误")])]),t._v(" "),a("li",[a("p",[t._v("官方推荐方法（替换方法）：用every和some替代forEach函数。every在碰到return false的时候，中止循环。some在碰到return true的时候，中止循环")])])]),t._v(" "),a("h3",{attrs:{id:"第八篇：js判断数组中是否包含某个值。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第八篇：js判断数组中是否包含某个值。"}},[t._v("#")]),t._v(" 第八篇：JS判断数组中是否包含某个值。")]),t._v(" "),a("h4",{attrs:{id:"_1-array-indexof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-array-indexof"}},[t._v("#")]),t._v(" 1.array.indexOf")]),t._v(" "),a("blockquote",[a("p",[t._v("此方法判断数组中是否存在某个值， 存在返回该数组元素的小标， 不存在返回 -1；")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    cnost arr = [1,2,3];\n    coonsole.log(arr.indexOf(2));\n")])])]),a("h4",{attrs:{id:"_2-array-includes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-array-includes"}},[t._v("#")]),t._v(" 2.array.includes")]),t._v(" "),a("blockquote",[a("p",[t._v("该方法判断数组中是否存在某个值，存在返回 true， 不存在返回 false")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    let arr = [1,2,3];\n    if(arr.includes(2)){\n        console.log('存在')\n    }else{\n        conosole.log('不存在')\n    }\n")])])]),a("h4",{attrs:{id:"_3-array-find-callback-thisarg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-array-find-callback-thisarg"}},[t._v("#")]),t._v(" 3.array.find(callback[, thisArg])")]),t._v(" "),a("blockquote",[a("p",[t._v("返回数组中满足条件的第一个元素的值，如果没有，返回undefined")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    let arr = [1,2,3];\n    let item = arr.find(it => it > 1); \n    item == 2; // true\n")])])]),a("h4",{attrs:{id:"_4-array-findindex-callback-thisarg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-array-findindex-callback-thisarg"}},[t._v("#")]),t._v(" 4.array.findIndex(callback[, thisArg])")]),t._v(" "),a("blockquote",[a("p",[t._v("返回数组中满足条件的第一个元素的下标，没有，返回-1；")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    var arr=[1,2,3,4];\n    var result = arr.findIndex(item =>{\n        return item > 3\n    });\n    console.log(result); \n")])])]),a("h3",{attrs:{id:"第九章：js中flat-数组扁平化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第九章：js中flat-数组扁平化"}},[t._v("#")]),t._v(" 第九章：JS中flat---数组扁平化")]),t._v(" "),a("p",[t._v("对于前端项目开发过程中，偶尔会出现层叠数据结构的数组，我们需要将多层级数组转换成一级数组（即提取嵌套数组最终转换为一级数组），使其内容合并且展开。那么该如何去实现呢？")]),t._v(" "),a("p",[t._v("需求：多维数组 > yi维数组")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    let arr = [1,[2,[3,[4,5]]],6];\n    let str = Json.stringify(arr);\n")])])]),a("h4",{attrs:{id:"_1-调用es的flat方法。-并不会去重"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-调用es的flat方法。-并不会去重"}},[t._v("#")]),t._v(" 1.调用ES的flat方法。   并不会去重")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    arr = arr.flat(Infinity)\n")])])]),a("h4",{attrs:{id:"_2-replace-split-操作json-字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-replace-split-操作json-字符串"}},[t._v("#")]),t._v(" 2.Replace + split, 操作json 字符串")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    arr = str.replace(/\\[|\\]/g, '').split(',')\n")])])]),a("h4",{attrs:{id:"_3-replace-json-parse-操作jsono-字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-replace-json-parse-操作jsono-字符串"}},[t._v("#")]),t._v(" 3. replace + JSON.parse ,操作jsono 字符串")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("   var str =  str.replace(/\\[|\\]/g,'');\n   arr = JSON.stringify('[' + str + ']');\n")])])]),a("h4",{attrs:{id:"_4-普通递归"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-普通递归"}},[t._v("#")]),t._v(" 4. 普通递归")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    let result = [];\n    let fn = function(ary) {\n    for(let i = 0; i < ary.length; i++) {\n        let item = ary[i];\n        if (Array.isArray(ary[i])){\n        fn(item);\n        } else {\n        result.push(item);\n        }\n    }\n    }\n")])])]),a("h4",{attrs:{id:"_5-利用reduce函数迭代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-利用reduce函数迭代"}},[t._v("#")]),t._v(" 5.利用reduce函数迭代")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    function falt(arr){\n        return arr.reduce((res, cur) => {\n            return res.concat(Array.isArray(cur) ? falt(cur) : cur)\n        }, [])\n    }\n\n    let ary = [1, 2, [3, 4], [5, [6, 7]]]\n    console.log(falt(ary))\n")])])]),a("h4",{attrs:{id:"_6-扩展运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-扩展运算符"}},[t._v("#")]),t._v(" 6. 扩展运算符")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    while(arr.some(Array.isArray)){\n        arr = [].concat(...arg);\n    }\n")])])]),a("h3",{attrs:{id:"第十篇：-js数组的高阶函数-基础篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第十篇：-js数组的高阶函数-基础篇"}},[t._v("#")]),t._v(" 第十篇： JS数组的高阶函数————基础篇")]),t._v(" "),a("h4",{attrs:{id:"_1-什么是高阶函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是高阶函数"}},[t._v("#")]),t._v(" 1.什么是高阶函数")]),t._v(" "),a("p",[t._v("简单概念，如下：")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("一个函数")]),t._v("可以接受另一个函数作为参数，胡哦哦这返回一个函数 ， "),a("code",[t._v("这种函数")]),t._v("就称为高阶函数。")])]),t._v(" "),a("h4",{attrs:{id:"_2-数组中的高阶函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-数组中的高阶函数"}},[t._v("#")]),t._v(" 2.数组中的高阶函数")]),t._v(" "),a("h5",{attrs:{id:"_1-map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-map"}},[t._v("#")]),t._v(" 1. map")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("参数： 两个参数， 一个是回调函数，一个是回调函数的this值（可选）；其中，回调函数默认传入三个参数，一次为当前元素、当前索引、整个数组。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("创建一个新数组，其结果是该数组中的每个元素一次调用回调函数后返回的结果。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("对原来的数组没有影响。")])])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    let nums = [1,2,3];\n    let obj = {val: 5};\n    let newNums = nums.map((item, index, array) => {\n        return item + index + array[index] + this.val\n        // 第一次 1 + 0 + 1 + 5\n        // 第二次 2 + 1 + 2 + 5\n        // 第三次 3 + 2 + 3 + 5\n    }, obj)\n    coonsole.log(newNums) // [7,10, 13]\n")])])]),a("h4",{attrs:{id:"_2-reduce"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-reduce"}},[t._v("#")]),t._v(" 2.reduce")]),t._v(" "),a("ul",[a("li",[t._v("参数： 两个参数, 一个为回调函数， 一个是初始值。回调函数中三个默认参数，依次为积累值、当前值、整个数组。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    let nums = [1,2,3];\n    let sum =nums.reduce((sum, cur, array) => sum + cur, 0);\n    console.log(sum); // 6\n")])])]),a("p",[t._v("不传默认值会怎么样？")]),t._v(" "),a("p",[t._v("不传默认值， 会以第一个元素为默认值，然后偶从第二个参数开始累计。")]),t._v(" "),a("h4",{attrs:{id:"_3-filter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-filter"}},[t._v("#")]),t._v(" 3.filter")]),t._v(" "),a("p",[t._v("参数： 一个参数，为回调函数，接受一个默认参数，就是当前元素。这个函数返回一个布尔值，决定元素是否保留。")]),t._v(" "),a("p",[t._v("filter方法返回一个新的函数，这个数组包含参数里所有被保留的项。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    let nums = [1,2,3];\n    let oddNums = nums.filter(item => item % 2);\n    coonsole.log(oddNums);  // [1,3];\n")])])]),a("h4",{attrs:{id:"_4-sort"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-sort"}},[t._v("#")]),t._v(" 4.sort")]),t._v(" "),a("p",[t._v("参数： 一个用于比较的函数， 参数 是用来比较的两个元素。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    let nums = [2, 3, 1];\n    //两个比较的元素分别为a, b\n    nums.sort(function(a, b) {\n    if(a > b) return 1;\n    else if(a < b) return -1;\n    else if(a == b) return 0;\n    })\n")])])]),a("p",[t._v("当比较函数返回值大于0，则 a 在 b 的后面，即a的下标应该比b大。")]),t._v(" "),a("p",[t._v("反之，则 a 在 b 的后面，即 a 的下标比 b 小。")]),t._v(" "),a("p",[t._v("整个过程就完成了一次升序的排列。")]),t._v(" "),a("p",[t._v("当然还有一个需要注意的情况，就是比较函数不传的时候，是如何进行排序的？")]),t._v(" "),a("blockquote",[a("p",[t._v("答案是将数字转换为字符串，然后根据字母unicode值进行升序排序，也就是根据字符串的比较规则进行升序排序。")])]),t._v(" "),a("h3",{attrs:{id:"第十一篇：能不能实现数组map方法？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第十一篇：能不能实现数组map方法？"}},[t._v("#")]),t._v(" 第十一篇：能不能实现数组map方法？")]),t._v(" "),a("p",[t._v("依照 "),a("RouterLink",{attrs:{to:"/blog/js/'https://tc39.es/ecma262/#sec-array.prototype.map',",title:"title"}},[t._v("ecma262草案")]),t._v(",实现的map规则如下")],1),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/11/3/16e311d99e860405?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"map草案内容"}})]),t._v(" "),a("p",[t._v("按照 草案内容一步一步 实现map：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function map(callbackFn, thisArg) {\n    let O = Object(this);\n    let len = O.length;\n    // 调用的不是数组\n    if(this == null){\n        throw new TypeError(\"cannot read property 'map' of null or undefined\");\n    }\n    // callback类型是否正确\n    if(Object.prototype.toString.call(callbackFn) === '[object Function]'){\n        throw new TypeError(callbackFn + ' is not a function')；\n    }\n    let T = thisArg || undefined;\n    let A = new Array(len);\n    for(let k =0; k < len ; k ++){\n        let PK = String(k);\n        if( PK in O){\n            let kValue = O[k];\n            let mappedValue = callback.call(T, kValue, k ,O);\n            A[k] = mappedValue;\n        }\n    }\n    return A;\n\n}\n")])])]),a("p",[t._v("第十二篇： 能不能实现数组reduce方法；")]),t._v(" "),a("p",[t._v("依照 "),a("code",[t._v("ecma262草案")]),t._v(", 实现的reduce的规范如下:")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/11/3/16e311ed2bfa8fad?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"reduce实现方式"}})]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    function reduce(callbackFn, initialValue) {\n        let O = Object(this);\n        let len = ).length;\n        if(Object.prototype.toString.call(callback) === '[object Function]'){\n            throw new TypeError(callback , 'must be a Function');\n        }\n        if(len === 0 && initialValue == null){\n            throw new TypeError(this, 'must be a Array');\n        }\n        let k = 0;\n        let accumulator = undefined;\n        if(initialValue !== null){\n            accumulator = initialValue;\n        }else{\n            find_initial: for(; k < len; k ++){\n                if(k in O){\n                    accumulator = array(k++);\n                    break find_initial;\n                }\n            }\n        }\n        for(; k < len; k++){\n            if( k in O){\n                accumulator = callbackFn.call(undefined, accumulator, O[k], k, O);\n            }\n        }\n        return accumulator;\n    }\n")])])]),a("p",[t._v("最后给大家奉上V8源码，以供大家检查:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    function ArrayReduce(callback, current) {\n  CHECK_OBJECT_COERCIBLE(this, "Array.prototype.reduce");\n\n  // Pull out the length so that modifications to the length in the\n  // loop will not affect the looping and side effects are visible.\n  var array = TO_OBJECT(this);\n  var length = TO_LENGTH(array.length);\n  return InnerArrayReduce(callback, current, array, length,\n                          arguments.length);\n}\n\nfunction InnerArrayReduce(callback, current, array, length, argumentsLength) {\n  if (!IS_CALLABLE(callback)) {\n    throw %make_type_error(kCalledNonCallable, callback);\n  }\n\n  var i = 0;\n  find_initial: if (argumentsLength < 2) {\n    for (; i < length; i++) {\n      if (i in array) {\n        current = array[i++];\n        break find_initial;\n      }\n    }\n    throw %make_type_error(kReduceNoInitial);\n  }\n\n  for (; i < length; i++) {\n    if (i in array) {\n      var element = array[i];\n      current = callback(current, element, i, array);\n    }\n  }\n  return current;\n}\n\n')])])]),a("p",[t._v("第十三篇： 能不能实现数组push、pop方法？")]),t._v(" "),a("p",[t._v("参照 ecma262 草案的规定，关于 push 和 pop 的规范如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/11/3/16e311f4fa483cc2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"push草案实现"}})]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    function push(...items){\n        let O = Objet(this);\n        let len = O.length;\n        let argCount = item.length;\n        if(len + argCount > 2 ** 53 -1){\n            throw new TypeError('The number of array is over the max value restricted!');\n        }\n        while(items.length){\n            let E = items.pop();\n            O[len++] = E;\n        }\n        O.length = len;\n        return len;\n    }\n")])])]),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/11/3/16e311fa338c2ecb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"pop草案方案"}})]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    function pop() {\n        let O = Object(this);\n        let len = O.length;\n        if(len === 0){\n            O.length = 0;\n            return undefined;\n        }else{\n            let index = len -1;\n            let element = O[0];\n            delete O[0];\n            O.length = index;\n            return element;\n        }\n    }\n")])])]),a("p",[t._v("第十四篇： 能不能实现数组filter方法？")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/11/3/16e312629684aafb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"filter实现方案"}})]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    function filter(callbackFn, thisArg) {\n        let O = Object(this);\n        let len = O.length;\n        if(Object.prototype.toString.call(callbackFn) === '[object Function]'){\n            throw new TypeError(callbackFn, 'must be a Function');\n        }\n        let thisArg = thisArg || undefined;\n        let A = [];\n        let k =0;\n        let to =0;\n        while(k < len){\n            if(k in O){\n                let kVlue = O[k];\n                let selected = callbackFn.call(thisArg, kvakue, k ,O);\n                if(selected){\n                    A[k++] = kValue;\n                }\n            }\n        }\n        return A;\n    }\n")])])]),a("p",[t._v("第十五篇：能不能实现数组Splice方法？")]),t._v(" "),a("p",[t._v("splice 可以说是最受欢迎的数组方法，api灵活，使用方便，梳理下用法。")]),t._v(" "),a("ul",[a("li",[t._v("1.splice(position, count) 表示从position的索引位置开始， 删除count个元素。")]),t._v(" "),a("li",[t._v("2.splice(position, 0, ele1, ele2,...) 表示从positiono的索引位置开始，插入一系列的元素。")]),t._v(" "),a("li",[t._v("3.splice(position, count, ele1, ele2, ...) 表示从从positiono的索引位置开始, 删除count个元素, 插入一系列的元素。")]),t._v(" "),a("li",[t._v("4.返回值为 "),a("code",[t._v("被删除元素")]),t._v("组成的 "),a("code",[t._v("数组")]),t._v("。")])]),t._v(" "),a("p",[t._v("接下来实现这个方法。")]),t._v(" "),a("p",[t._v("首先梳理下实现的思路。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/11/3/16e3121dad3976ea?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"splice处理流程"}})]),t._v(" "),a("h4",{attrs:{id:"初步实现："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初步实现："}},[t._v("#")]),t._v(" 初步实现：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    Array.prototype.splice = function(startIndex, deleteCount, ...addElements){\n        let argmentsLen = arguments.length;\n        let array = Object(this);\n        let len = array.length;\n        let deleteArr = new Array(deleteCount);\n\n        // 拷贝删除的元素\n        sliceDeleteElements(array, startIndex, deleteCount, deleteArr);\n\n        // 移动删除元素后面的元素\n        movePostElements(array, startIndex, len, deleteCount, addElements);\n\n        // 插入新元素\n        for (let i = 0; i < addElements.length; i++) {\n            array[startIndex + i] = addElements[i];\n        }\n        array.length = len - deleteCount + addElements.length;\n        return deleteArr;\n\n    }\n")])])]),a("p",[t._v("先拷贝删除元素")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    function sliceDeleteElements(array, startIndex, deleteCount, deleteArr){\n        for(let i =0; i < deleteCount; i ++){\n            let index = startIndex + i;\n            deleteArr[i] = array[index];\n        }\n    }\n")])])]),a("p",[t._v("然后对删除元素后面的元素进行挪动：")]),t._v(" "),a("ol",[a("li",[t._v("添加的元素和删除的元素个数相等。")]),t._v(" "),a("li",[t._v("添加的元素个数小于删除的元素个数。")]),t._v(" "),a("li",[t._v("添加的元素个数大于删除的元素格式。")])]),t._v(" "),a("p",[t._v("当两者相等时：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    movePostElements(array,startIndex, len, deleteCount, addElements){\n        if(deleteCount == addElements.length){\n            return \n        }\n    }\n")])])]),a("p",[t._v("当添加元素小于删除元素的数量时：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/11/3/16e31220582da903?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"计算规律1"}})]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    movePostElements(array,startIndex, len, deleteCount, addElements){\n        if(deleteCount > addElements.length){\n            for(let i = startIndex + deleteCount; i < len; i ++){\n                let fromIndex = i;\n                let toIndex = fromIndex - (deleteCount - addElements.length)\n                if(fromIndex in array){\n                    array[toIndex] = array[fromIndex];\n                }\n            }\n            // 缩减array 位置前移后剩余的空格元素\n            array.length = len - (deledeCount - addElements.length);\n        }\n    }\n")])])]),a("p",[t._v("当添加元素数量大于删除元素数量时：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/11/3/16e3122363235833?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"计算规律2"}})]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    movePostElements(array,startIndex, len, deleteCount, addElements){\n        if(deleteCount < addElements.length) {\n            array.length = len + addElements.length - deleteCount;\n            for(let i = startIndex + deleteIndex; i < len; i ++){\n                let fromIndex = i;\n                let toIndex = i + addElements.length - deleteCount;\n                array[toIndex] = array[fromIndex];\n            }\n        }\n    }\n")])])]),a("h4",{attrs:{id:"优化一：-参数的边界情况。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化一：-参数的边界情况。"}},[t._v("#")]),t._v(" 优化一： 参数的边界情况。")]),t._v(" "),a("p",[t._v("当用户传来非法的 startIndex 和 deleteCount 或者负索引的时候，需要我们做出特殊的处理。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    const computedStartIndex = function(startIndex, len){\n        // 索引负数 从数组最后的元素开始数起来\n        if(startIndex < 0){\n            return startIndex + len > 0 ? startIndex + len : 0;\n        }\n        return startIndex > len ? len : startIndex;\n    } \n\n    const computedDeleteCount = function (startIndex,len, deleteCount, argumentsLen) {\n        // 删除数目没有传， 默认删除startIndex后面的所有元素。\n        if(arguments.length === 1){\n            return len - startIndex;\n        }\n        // 删除数目过小\n        if(deleteCount < 0){\n            return 0;\n        }\n        // 删除数目过大\n        if(deleteCount > len -startIndex){\n            return len -startIndex;\n        } \n        return len - startIndex;\n    }\n\n    Array.protootype.splice = function (startIndex, deleteCount, ...addElements) {\n        ...\n        \n        startIndex = computedStartIndex(startIndex, len);\n        deleteCount = ComputedDeleteCount(startIndex, len ,deleteCount, argumentsLen);\n        \n        ...\n\n    }\n\n\n")])])]),a("p",[t._v("优化二： 数组为密封对象或冻结对象。")]),t._v(" "),a("p",[t._v("什么是密封对象？")]),t._v(" "),a("blockquote",[a("p",[t._v("密封对象是不可扩展的对象，而且已有成员的[[Configurable]]属性被设置为false，这意味着不能添加、删除方法和属性。但是属性值是可以修改的。")])]),t._v(" "),a("p",[t._v("什么是冻结对象？")]),t._v(" "),a("blockquote",[a("p",[t._v("冻结对象是最严格的防篡改级别，除了包含密封对象的限制外，还不能修改属性值.")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    if (Object.isSealed(array) && deleteCount !== addElements.length) {\n        throw new TypeError('the object is a sealed object!')\n    } else if(Object.isFrozen(array) && (deleteCount > 0 || addElements.length > 0)) {\n        throw new TypeError('the object is a frozen object!')\n    }\n\n")])])]),a("h3",{attrs:{id:"第十六篇：-能不能实现数组的sort方法？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第十六篇：-能不能实现数组的sort方法？"}},[t._v("#")]),t._v(" 第十六篇： 能不能实现数组的sort方法？")]),t._v(" "),a("p",[t._v("实现前 先说下常见的排序方法。")]),t._v(" "),a("h4",{attrs:{id:"_1-冒泡排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-冒泡排序"}},[t._v("#")]),t._v(" 1.冒泡排序")]),t._v(" "),a("p",[t._v("排序思想：")]),t._v(" "),a("ol",[a("li",[t._v("两两比较，如果前者比后者大则交换位置。")]),t._v(" "),a("li",[t._v("每遍历一遍最大的数就会冒泡到最后，确定每轮的最大值放到数组最后位置。")]),t._v(" "),a("li",[t._v("循环 1、2 两步")])]),t._v(" "),a("p",[t._v("代码实现：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    var arr = [8,99,12312,411241,4123,1,23,45,666];\n    for(let i =0; i < arr.length -1; i ++){\n        for(let j = 0; j < arr.length -1 -i; j ++){\n            if(arr[j] > arr[j+1]){\n                let temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }   \n    }\n    console.log(arr);\n")])])]),a("ul",[a("li",[t._v("时间复杂度O（n²）")])]),t._v(" "),a("h4",{attrs:{id:"_2-选择排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-选择排序"}},[t._v("#")]),t._v(" 2.选择排序")]),t._v(" "),a("p",[t._v("算法思想：")]),t._v(" "),a("ol",[a("li",[t._v("找到所有数中最大值下标。")]),t._v(" "),a("li",[t._v("找到的最大值得下标和最后一个位置的数值交换位置，将每次找到的最大值的位置放到最后。")]),t._v(" "),a("li",[t._v("循环1、2两步")])]),t._v(" "),a("p",[t._v("代码实现：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    let arr = [8,99,12312,411241,4123,1,23,45,666];\n    for(let i =0; i < arr.length -1; i ++){\n        let max = 0;\n        for(let j =1; j < arr.length - i; j++){\n            if(arr[j] > arr[max]){\n                max = j;\n            }\n        }\n        let temp = arr[max];\n        arr[max] = arr[arr.length - 1 - i];\n        arr[arr.length - 1 - i] = temp;\n    }\n    console.log(arr);\n")])])]),a("ul",[a("li",[t._v("时间复杂度O（n²），但是由于选择排序每轮比较只交换一次，所以实际性能要优于冒泡")])]),t._v(" "),a("h4",{attrs:{id:"_3-直接插入排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-直接插入排序"}},[t._v("#")]),t._v(" 3. 直接插入排序")]),t._v(" "),a("p",[t._v("排序思想")]),t._v(" "),a("ol",[a("li",[t._v("从位置1的数值n开始，将前面已经遍历过的数组集合看出数组m，将n往m中插入")]),t._v(" "),a("li",[t._v("n插入到集合m中时从后往前比较，如果比n大则往后移一位，如果比较到比n小，则当前位置就是插入n的位置")]),t._v(" "),a("li",[t._v("通过1、2的操作则可以保证每次插入n后m的集合都是排好的序列")]),t._v(" "),a("li",[t._v("循环1、2、3")])]),t._v(" "),a("p",[t._v("代码实现：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    let arr = [8,99,12312,411241,4123,1,23,45,666];\n    for(let i =1; i < arr.length; i ++){\n        // i是每次从位置1开始，将每次去做插入的值付给变量temp。 \n        let temp = arr[i];\n        for(let j = i -1;j >-1; j--){\n            if(arr[j] > temp ){\n                arr[j + 1] = arr[j];\n                // 当前不存在比位置小的数字，判断是否到了第0位索引\n                if(j === 0){\n                    arr[j] = temp;\n                }\n            }else{\n                arr[j + 1] = temp;\n                break;\n            }\n        }\n    }\n    console.log(arr);\n")])])]),a("h4",{attrs:{id:"_4-二分法排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-二分法排序"}},[t._v("#")]),t._v(" 4.二分法排序")]),t._v(" "),a("ul",[a("li",[t._v("二分法排序是插入排序的改进版本，插入排序插入到前方集合中采用的方式是逐个比较，二分法则是采用二分比较。")])]),t._v(" "),a("p",[t._v("排序算法：")]),t._v(" "),a("ol",[a("li",[t._v("从位置1的数值为n，将前面已经遍历过的数值集合看成数组m，则将n往m中插入")]),t._v(" "),a("li",[t._v("n插入到集合m中时采用二分法，先比较m中中间的值，如果比n大则继续比较剩下一半集合的中间值，直到比较到拆分的集合中左边或者右边一半没有值为止，则当前中间值得位置即为n插入到m中的位置。")]),t._v(" "),a("li",[t._v("通过1、2的操作则可以保证每次插入n后m的集合都是排好的序列")]),t._v(" "),a("li",[t._v("循环1、2、3操作将集合中所有数值均插入一遍即排序完成")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    let arr = [8,99,12312,411241,4123,1,23,45,666];\n    for(let n =1; n < arr.length; n++ ){\n        let temp = arr[n];\n        let left = 0, right = arr.length -1;\n        let mid;\n        while(left < right){\n            mid = Math.floor((left + right)/2);\n            if(arr[mid] > temp){\n                right = mid - 1;\n            }else{\n                left = mid + 1;\n            }\n        }\n        for(let i = n -1; i >= left; i--){\n            if(i >= left){\n                arr[i+1] = arr[i];\n            }\n        }\n        if(temp !== arr[n]){\n            arr[left] = temp;\n        }\n    }\n\n    console.log(arr)\n")])])]),a("h4",{attrs:{id:"_5-快速排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-快速排序"}},[t._v("#")]),t._v(" 5.快速排序")]),t._v(" "),a("p",[t._v("快速排序是对冒泡排序的一种改进。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一不部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。\n整个排序过程只需要三步：")]),t._v(" "),a("ul",[a("li",[t._v("在数据集之中选择一个元素作为’基准‘")]),t._v(" "),a("li",[t._v("所有小于基准的元素，都移动到 ’基准‘ 的左边；所有大于’基准‘的都移动到右边。")]),t._v(" "),a("li",[t._v("多基准两侧的两个子集，不断重复1、2两步，知道所有子集都只剩下一个元素。此时的数组显然已经是升序状态。")])]),t._v(" "),a("p",[t._v("算法实现：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    let arr = [8,99,12312,411241,4123,1,23,45,666];\n    function quickSort(arr){\n        if(arr.length <= 1) return arr;\n        let left = [],\n            right = [],\n            baseDot = Math.round(arr.length / 2),\n            base = arr.splice(baseDot, 1)[0];\n        for(let i=0; i < arr.length; i++){\n            if(arr[i] < base){\n                left.push(arr[i])\n            }else {\n                right.push(arr[i])\n            }\n        }\n        return quickSort(left).concat([base], quickSort(right));\n    }\n    quickSort(arr);\n")])])]),a("p",[t._v("再回到正题：")]),t._v(" "),a("p",[t._v("对JS数组的sort方法已经不陌生了，上面总结了它的使用方法。那它的内部是怎么实现的呢？如果我们可以进入它的内部去看一看，理解背后的设计，会使我们的思维和素养得到不错的提升。")]),t._v(" "),a("p",[t._v("sort 方法在 V8 内部相对与其他方法而言是一个比较高深的算法，对于很多边界情况做了反复的优化，但是这里我们不会直接拿源码来干讲。我们会来根据源码的思路，实现一个 跟引擎性能一样的排序算法，并且一步步拆解其中的奥秘。")]),t._v(" "),a("h4",{attrs:{id:"v8-引擎的思路分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v8-引擎的思路分析"}},[t._v("#")]),t._v(" V8 引擎的思路分析")]),t._v(" "),a("p",[t._v("首先梳理下源码中的排序思路：")]),t._v(" "),a("ul",[a("li",[t._v("当 "),a("code",[t._v("n < 10")]),t._v(" 时，采用"),a("code",[t._v("插入排序")])]),t._v(" "),a("li",[t._v("当 "),a("code",[t._v("n > 10")]),t._v("时，采用 `三路快速排序\n"),a("ul",[a("li",[t._v("10 < n < 1000,采用中位数 作为哨兵元素")]),t._v(" "),a("li",[t._v("n > 1000时，每隔 200~ 215个元素挑选出一个元素，放到一个新数组，然后对它进行排序，找到中间位置的数，将它作为中位数。")])])])]),t._v(" "),a("p",[t._v("在动手以前，我们先来说下这样做的原因。")]),t._v(" "),a("h5",{attrs:{id:"第一、为什么元素个数少的时候采用插入排序？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一、为什么元素个数少的时候采用插入排序？"}},[t._v("#")]),t._v(" 第一、为什么元素个数少的时候采用插入排序？")]),t._v(" "),a("p",[t._v("虽然插入排序理论上说是O(n^2)的算法，快速排序是一个O(nlogn)级别的算法。但是别忘了，这只是理论上的估算，在实际情况中两者的算法复杂度前面都会有一个系数的，\n当 n 足够小的时候，快速排序nlogn的优势会越来越小，倘若插入排序O(n^2)前面的系数足够小，那么就会超过快排。而事实上正是如此，插入排序经过优化以后对于小数据集的排序会有非常优越的性能，很多时候甚至会超过快排")]),t._v(" "),a("p",[t._v("因此，对于很小的数据量，应用插入排序是一个非常不错的选择。")]),t._v(" "),a("h5",{attrs:{id:"第二、为什么要花大力气寻找哨兵元素？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二、为什么要花大力气寻找哨兵元素？"}},[t._v("#")]),t._v(" 第二、为什么要花大力气寻找哨兵元素？")]),t._v(" "),a("p",[t._v("因为"),a("code",[t._v("快速排序")]),t._v("的瓶颈在于递归的深度，最坏的情况是每次的哨兵都是最小元素或者最大元素，那么进行partition(一边是小于哨兵的元素，另一边是大于哨兵的元素)时，就会有一边是空的，那么这么排下去，递归的层数就达到了n, 而每一层的复杂度是O(n)，因此快排这时候会退化成O(n^2)级别。")]),t._v(" "),a("p",[t._v("这种情况是要尽力避免的！如果来避免？")]),t._v(" "),a("p",[t._v("就是让哨兵元素进可能地处于数组的中间位置，让最大或者最小的情况尽可能少。这时候，你就能理解 V8 里面所做的种种优化了。")]),t._v(" "),a("p",[t._v("接下来，我们来一步步实现的这样的官方排序算法。")]),t._v(" "),a("h4",{attrs:{id:"插入排序及优化。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入排序及优化。"}},[t._v("#")]),t._v(" 插入排序及优化。")]),t._v(" "),a("p",[t._v("最初的插入排序可能是这样写的。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    const insertSort = (arr, start = 0, end) => {\n        end = end || arr.length;\n        for(let i = start; i < end; i++) {\n            let j;\n            for(j = i; j > start && arr[j - 1] > arr[j]; j --) {\n                let temp = arr[j];\n                arr[j] = arr[j - 1];\n                arr[j - 1] = temp;\n            }\n        }\n        return;\n    }\n")])])]),a("p",[t._v("看似可以正确的完成排序，但实际上交换元素会有相当大的性能消耗，我们完全可以用变量覆盖的方式来完成，如图所示:")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/11/3/16e3124af5479387?imageslim",alt:"快速排序动图"}})]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    const insert = function (arr, start = 0, end) {\n        let end = end || arr.length;\n        for(let i = start + 1; i < end; i ++){\n            let temp = arr[i];\n            let j; // 把let变量提前， 不用每次便利都去重新声明一个变量\n            for(j =i; j > start && arr[j] > temp; j--){\n                arr[j] = srr[j -1];\n            }\n            arr[j] = temp\n        }\n    }\n\n")])])]),a("p",[t._v("接下来正式进去sort函数：")]),t._v(" "),a("h4",{attrs:{id:"寻找哦哨兵元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#寻找哦哨兵元素"}},[t._v("#")]),t._v(" 寻找哦哨兵元素")]),t._v(" "),a("p",[t._v("sort的骨架大致如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    Array.prototype.sort = (compareFn) => {\n        let array = Object(this);\n        let length = length >>> 0;\n        return InnerArraySort(array, length, compareFn);\n    }\n\n    const InnerArraySort = (array, length, compareFn) => {\n        // 比较函数未传入或类型不对，默认值\n        if(Object.prototype.toString.call(compareFn) === '[object Function]'){\n            compareFn = function(x, y){\n                if(x === y) return 0;\n                x = String(x);\n                y = String(y);\n                if(x == y) return 0;\n                else return x < y ? -1 : 1;\n            }\n        }\n\n        const insertSort = () => {\n            // ... 插入排序\n        }\n\n        const getThirdIndex = (a, from , to) => {\n            // 元素个数大于1000时，寻找哨兵元素\n        }\n\n        const quickSort = (a, from, to) => {\n            // 哨兵位置\n            let thirdIndex = 0;\n            if(to -from <= 10){\n                insertSort(a, from ,to);\n                return \n            }\n            else if(to -from > 1000){\n                thirdIndex = getThirdIndex(a, from , to);\n                    \n            }\n            else{\n                // 小于1000直接取中间值\n                thirdIndex = from + (10 - from) >> 1;\n                    \n            }\n            // 下面开始快排 \n            ...\n        }\n    }\n")])])]),a("p",[t._v("先实现获取哨兵位置的代码：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    coonst getThirdIndex = (a, from, to) => {\n        let tempArr = [];\n        // 递增量，200 - 215 之间，任何正数和 15 做与操作， 0 ~ 15\n        let increment = 200 + ((to - from) & 15);\n        let j = 0;\n        from += 1;\n\n        to -= 1;\n        for(let i = from; i < to; i += increment) {\n            tmpArr[j] = [i, a[i]];\n            j ++\n        }\n        // 把临时数组排序，取中间的值，确保哨兵的值接近平均位置\n        tmpArr.sort(function(a, b) {\n            return comparefn(a[1], b[1]);\n        });\n        let thirdIndex = tmpArr[tmpArr.length >> 1][0];\n        return thirdIndex;\n    }\n")])])]),a("p",[t._v("v8 源码")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function InsertionSort(a, from, to) {\n    for (var i = from + 1; i < to; i++) {\n        var element = a[i];\n        for (var j = i - 1; j >= from; j--) {\n            var tmp = a[j];\n            var order = comparefn(tmp, element);\n            if (order > 0) {\n                a[j + 1] = tmp;\n            } else {\n                break;\n            }\n        }\n        a[j + 1] = element;\n    }\n};\n\n\nfunction QuickSort(a, from, to) {\n\n    var third_index = 0;\n    while (true) {\n            // Insertion sort is faster for short arrays.\n        if (to - from <= 10) {\n            InsertionSort(a, from, to);\n            return;\n        }\n        if (to - from > 1000) {\n            third_index = GetThirdIndex(a, from, to);\n        } else {\n            third_index = from + ((to - from) >> 1);\n        }\n        // Find a pivot as the median of first, last and middle element.\n        var v0 = a[from];\n        var v1 = a[to - 1];\n        var v2 = a[third_index];\n\n        var c01 = comparefn(v0, v1);\n        if (c01 > 0) {\n            // v1 < v0, so swap them.\n            var tmp = v0;\n            v0 = v1;\n            v1 = tmp;\n        } // v0 <= v1.\n        var c02 = comparefn(v0, v2);\n        if (c02 >= 0) {\n            // v2 <= v0 <= v1.\n            var tmp = v0;\n            v0 = v2;\n            v2 = v1;\n            v1 = tmp;\n        } else {\n            // v0 <= v1 && v0 < v2\n            var c12 = comparefn(v1, v2);\n            if (c12 > 0) {\n                // v0 <= v2 < v1\n                var tmp = v1;\n                v1 = v2;\n                v2 = tmp;\n            }\n        }\n\n        // v0 <= v1 <= v2\n        a[from] = v0;\n        a[to - 1] = v2;\n\n        var pivot = v1;\n\n        var low_end = from + 1; // Upper bound of elements lower than pivot.\n        var high_start = to - 1; // Lower bound of elements greater than pivot.\n\n        a[third_index] = a[low_end];\n        a[low_end] = pivot;\n\n        // From low_end to i are elements equal to pivot.\n        // From i to high_start are elements that haven't been compared yet.\n\n        partition: for (var i = low_end + 1; i < high_start; i++) {\n            var element = a[i];\n            var order = comparefn(element, pivot);\n            if (order < 0) {\n                a[i] = a[low_end];\n                a[low_end] = element;\n                low_end++;\n            } else if (order > 0) {\n                do {\n                    high_start--;\n                    if (high_start == i) break partition;\n                    var top_elem = a[high_start];\n                    order = comparefn(top_elem, pivot);\n                } while (order > 0);\n\n                a[i] = a[high_start];\n                a[high_start] = element;\n                if (order < 0) {\n                    element = a[i];\n                    a[i] = a[low_end];\n                    a[low_end] = element;\n                    low_end++;\n                }\n            }\n        }\n\n\n        if (to - high_start < low_end - from) {\n            QuickSort(a, high_start, to);\n            to = low_end;\n        } else {\n            QuickSort(a, from, low_end);\n            from = high_start;\n        }\n    }\n}\n\n\n")])])]),a("h3",{attrs:{id:"第十七篇：能不能模拟实现一个new的效果？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第十七篇：能不能模拟实现一个new的效果？"}},[t._v("#")]),t._v(" 第十七篇：能不能模拟实现一个new的效果？")]),t._v(" "),a("p",[a("code",[t._v("new")]),t._v(" 被调用后做了三件事：")]),t._v(" "),a("ol",[a("li",[t._v("让实例可以访问到私有属性。")]),t._v(" "),a("li",[t._v("让实例可以访问构造函数原型所以原型链上的属性")]),t._v(" "),a("li",[t._v("如果构造函数的返回值不是引用类型。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    function newOperator() {\n        let Con = [].unshift.call(arguments);\n        if(typeof Con !== 'function'){\n            throw new TypeError('newOperator function the first param must be a function');\n        }\n        let obj = Object.create(Con.prototype);\n        let res = Con.call(obj, arguments);\n\n        let isObject = typeof res === 'object' && res !== null;\n        let isFunction = typoof res === 'function';\n        return isObject || isFunction ? res : obj;\n    }\n")])])]),a("h3",{attrs:{id:"第十七章：能不能模拟实现一个bind效果？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第十七章：能不能模拟实现一个bind效果？"}},[t._v("#")]),t._v(" 第十七章：能不能模拟实现一个bind效果？")]),t._v(" "),a("p",[t._v("实现bind之前，我们首先要知道哦它做了什么。")]),t._v(" "),a("ol",[a("li",[t._v("对于普通函数，绑定this指向。")]),t._v(" "),a("li",[t._v("对于构造函数，要保证原函数的原型对象上的属性不能丢")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    Function.prototype.bind = function(context, ...args) {\n        // 类型判断\n        if(typeOf this !== 'function'){\n            throw new TypeError('Function.prototype.bind -- what is trying to be bound is not a Function');\n        }\n        let self = this;\n        let bound = function () {\n            return self.apply(this instanceof bound ? this : content, args);\n        }\n        bound.prototype = Object.create(self.prototype);\n        return bound;\n    }\n")])])]),a("h3",{attrs:{id:"第十八篇：能不能实现一个-call-apply-函数？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第十八篇：能不能实现一个-call-apply-函数？"}},[t._v("#")]),t._v(" 第十八篇：能不能实现一个 call/apply 函数？")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    Function.prototype.apply = function(context, ...args){\n        if(typeof this !== 'function'){\n            throw new TypeError('Function.prototype.apply -- what is trying to be bound is not a Function');\n        }\n        let context = context || window;\n        // 隐式绑定\n        context.fn = this;\n        let res =eval( 'context.fn(...args)');  \n        delete context.fn;\n        return res;\n    }\n")])])]),a("h3",{attrs:{id:"第十九篇：谈谈你对js中this的理解。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第十九篇：谈谈你对js中this的理解。"}},[t._v("#")]),t._v(" 第十九篇：谈谈你对JS中this的理解。")]),t._v(" "),a("p",[t._v("其实JS中的this是一个非常简单的东西，只需要理解它的执行规则就ok。")]),t._v(" "),a("p",[t._v("bind/apply/call 属于显示绑定")]),t._v(" "),a("p",[t._v("主要的隐式绑定场景如下：")]),t._v(" "),a("ol",[a("li",[t._v("全局上下文。")]),t._v(" "),a("li",[t._v("直接调用函数。")]),t._v(" "),a("li",[t._v("对象.方法调用")]),t._v(" "),a("li",[t._v("DOM事件绑定")]),t._v(" "),a("li",[t._v("new构造函数绑定")]),t._v(" "),a("li",[t._v("箭头函数")])]),t._v(" "),a("h4",{attrs:{id:"_1-全局上下文。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-全局上下文。"}},[t._v("#")]),t._v(" 1.全局上下文。")]),t._v(" "),a("p",[t._v("全局上下文默认this指向window， 严格模式下指向undefined。")]),t._v(" "),a("h4",{attrs:{id:"_2-直接调用函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-直接调用函数"}},[t._v("#")]),t._v(" 2.直接调用函数")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    var a = {\n        x: function() {\n            console.log(123);\n        }\n    }\n\n    var fn = a.x;\n    fn()\n")])])]),a("p",[t._v("直接调用fn，this相当于全局上下文的执行。")]),t._v(" "),a("h4",{attrs:{id:"_3-对象-方法调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-对象-方法调用"}},[t._v("#")]),t._v(" 3.对象.方法调用")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    a.x();\n")])])]),a("p",[t._v("这就是"),a("code",[t._v("对象.方法")]),t._v("的情况， this指向这个对象。")]),t._v(" "),a("h4",{attrs:{id:"_4-dom事件绑定。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-dom事件绑定。"}},[t._v("#")]),t._v(" 4.DOM事件绑定。")]),t._v(" "),a("p",[t._v("onclick和addEventerListener中 this 默认指向绑定事件的元素。")]),t._v(" "),a("p",[t._v("IE比较奇异，使用attachEvent，里面的this默认指向window。")]),t._v(" "),a("h4",{attrs:{id:"_5-new-构造函数绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-new-构造函数绑定"}},[t._v("#")]),t._v(" 5.new 构造函数绑定")]),t._v(" "),a("p",[t._v("构造函数中的this指向实例对象本身。")]),t._v(" "),a("h4",{attrs:{id:"_6-箭头函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-箭头函数"}},[t._v("#")]),t._v(" 6. 箭头函数")]),t._v(" "),a("p",[t._v("箭头函数没有this，因此也不能绑定。里面的this会指向最近的非箭头函数的this，找不到就是window（严格模式下是undefined）")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    let obj = {\n        x: functiono() {\n            let fn = () => {\n                console.log(this);\n            }\n            fn();\n        }\n    }\n\n    obj.x(); // 找到最近的非箭头函数x，x现在绑定着obj, 因此箭头函数中的this是obj\n")])])]),a("blockquote",[a("p",[t._v("优先级： new > bind、call、apply> 对象.方法> 直接调用")])]),t._v(" "),a("h3",{attrs:{id:"第二十篇：-js中浅拷贝的方法。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二十篇：-js中浅拷贝的方法。"}},[t._v("#")]),t._v(" 第二十篇： JS中浅拷贝的方法。")]),t._v(" "),a("h4",{attrs:{id:"重要：-什么是拷贝？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重要：-什么是拷贝？"}},[t._v("#")]),t._v(" 重要： 什么是拷贝？")]),t._v(" "),a("p",[t._v("首先来直观的感受下什么是拷贝。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    let arr = [1,2,3];\n    let newArr = arr;\n    newArr[0] = 100;\n\n    console.log(arr);  // [100,2,3]\n")])])]),a("p",[t._v("这是直接复制的情况，不设计任何拷贝。当改变newArr的时候，由于是同一个引用， arr的值也跟着变化。")]),t._v(" "),a("p",[t._v("现在进行浅拷贝。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    let arr = [1,2,3];\n    let newArr = arr.slice();\n    newArr[0] = 100;\n    coonsole.log(arr);   // [1,2,3]\n")])])]),a("p",[t._v("当修改newArr的时候，arr的值并不改变。什么原因?因为这里newArr是arr浅拷贝后的结果，newArr和arr现在引用的已经不是同一块空间啦！")]),t._v(" "),a("p",[t._v("这就是浅拷贝！")]),t._v(" "),a("p",[t._v("但是这又会带来一个潜在的问题:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    let arr = [1, 2, {val: 4}];\n    let newArr = arr.slice();\n    newArr[2].val = 1000;\n\n    console.log(arr);//[ 1, 2, { val: 1000 } ]\n")])])]),a("p",[t._v("咦!不是已经不是同一块空间的引用了吗？为什么改变了newArr改变了第二个元素的val值，arr也跟着变了。\n这就是浅拷贝的限制所在了。它只能拷贝一层对象。如果有对象的嵌套，那么浅拷贝将无能为力。但幸运的是，深拷贝就是为了解决这个问题而生的，它能\n解决无限极的对象嵌套问题，实现彻底的拷贝。当然，这是我们下一篇的重点。 现在先让大家有一个基本的概念。\n接下来，我们来研究一下JS中实现浅拷贝到底有多少种方式？")]),t._v(" "),a("h4",{attrs:{id:"_1-手动实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-手动实现"}},[t._v("#")]),t._v(" 1.手动实现")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    const shallowClone = (target) => {\n        // 引用类型\n        if(typeof target === 'object' && target !== null){\n            const targetClone = Array.isArray(target) ? [] : {};\n            for(let key in target){\n                if(target.hasOwnproperty(key)){\n                    cloneTarget[key] = target[key];\n                }\n            }\n            return targetClone;\n        }else{\n            return target;\n        }\n    }\n")])])]),a("h3",{attrs:{id:"_2-object-assign"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-object-assign"}},[t._v("#")]),t._v(" 2.Object.assign")]),t._v(" "),a("p",[t._v("但是需要注意的是，Object.assign()拷贝的对象的属性的引用，而不是对象本身。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    let obj = { name: 'sy', age: 18 };\n    const obj2 = Object.assign({}, obj, {name: 'sss'});\n    console.log(obj2);//{ name: 'sss', age: 18 }\n\n")])])]),a("h3",{attrs:{id:"_3-concat浅拷贝数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-concat浅拷贝数组"}},[t._v("#")]),t._v(" 3.concat浅拷贝数组")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    let arr = [1, 2, 3];\n    let newArr = arr.concat();\n    newArr[1] = 100;\n    console.log(arr);//[ 1, 2, 3 ]\n\n")])])]),a("h3",{attrs:{id:"_4-slice浅拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-slice浅拷贝"}},[t._v("#")]),t._v(" 4.slice浅拷贝")]),t._v(" "),a("p",[t._v("开头的例子")]),t._v(" "),a("h3",{attrs:{id:"_5-展开运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-展开运算符"}},[t._v("#")]),t._v(" 5. ...展开运算符")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    let arr = [1, 2, 3];\n    let newArr = [...arr];  //跟arr.slice()是一样的效果\n")])])]),a("h3",{attrs:{id:"第二十一篇：能不能写一个完整的深拷贝？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二十一篇：能不能写一个完整的深拷贝？"}},[t._v("#")]),t._v(" 第二十一篇：能不能写一个完整的深拷贝？")]),t._v(" "),a("p",[t._v("上一篇已经解释了什么是浅拷贝，现在来实现一个完整且专业的深拷贝。")]),t._v(" "),a("h3",{attrs:{id:"_1-简易版及问题。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-简易版及问题。"}},[t._v("#")]),t._v(" 1.简易版及问题。")]),t._v(" "),a("p",[t._v("利用JSON api。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    JSON.parse(JSON.stringify());\n")])])]),a("p",[t._v("估计这个api能覆盖大多数的应用场景，没错，谈到深拷贝，我第一个想到的也是它。但是实际上，对于某些严格的场景来说，这个方法是有巨大的坑的。问题如下：")]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("无法解决"),a("code",[t._v("循环引用")]),t._v("的问题，举个例子：")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    const a = {val: 2}\n    a.target = a;\n")])])]),a("p",[t._v("拷贝对象a会出现系统栈溢出，以为出现了"),a("code",[t._v("无线递归")]),t._v("的情况。")]),t._v(" "),a("blockquote",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("无法拷贝一些特殊的对象类型，如 RegExp 、 Date 、 Set 、 Map 等")])])]),t._v(" "),a("blockquote",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("无法拷贝 "),a("code",[t._v("函数")]),t._v(" 划重点。")])])]),t._v(" "),a("p",[t._v("因此这个方法先pass掉，我们重新写一个深拷贝，简易版如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    const deepClone = (targe) => {\n        if(typeof target === 'object' && target !== null){\n            let newTarget = Array.isArray(target) ? [] : {};\n            for(let key in target) {\n                if(target.hasOwnProperty(key)){\n                    newTarger[key] = deepClone(target[key]);\n                }\n            }\n            return newTarget;\n        }else{\n            return target;\n        }\n    }\n")])])]),a("p",[t._v("现在，我们以刚刚发现的三个问题为导向，一步步来完善、优化我们的深拷贝代码。")]),t._v(" "),a("h3",{attrs:{id:"_2-解决循环引用。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-解决循环引用。"}},[t._v("#")]),t._v(" 2. 解决循环引用。")]),t._v(" "),a("p",[t._v("问题如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    var a = {}\n    a.target = a;\n    deepClone(a); // 报错: RangeError: Maximum call stack size exceeded\n")])])]),a("p",[t._v("这就是循环引用。我们怎么来解决这个问题呢？")]),t._v(" "),a("p",[t._v("创建一个Map。记录下已经拷贝过的对象，如果说已经拷贝过，那直接返回它行了.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    const isObject = (target) => typeof target === 'object' && target !== null;\n    const deepClone = (target, map = new Map()) = > {\n        if(map.get(target)){\n            return target;\n        }\n        if(isObject(target)){\n            map.set(target, true);\n            let res = Array.isArray(target) ? [] : {};\n            for(let key in target){\n                if(target.hasOwnProperty(key)){\n                    res[key] = deepClone(target, map)\n                }\n            }\n            return res;\n        }else{\n            return target;\n        }\n    }\n")])])]),a("p",[t._v("现在来试一试：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    const a = {val:2};\n    a.target = a;\n    let newA = deepClone(a);\n    console.log(newA) //{ val: 2, target: { val: 2, target: [Circular] } }\n")])])]),a("p",[t._v("好像是没有问题了, 拷贝也完成了。但还是有一个潜在的坑, 就是map 上的 key 和 map 构成了强引用关系，这是相当危险的。我给你解释一下与之相对的弱引用的概念你就明白了：")]),t._v(" "),a("blockquote",[a("p",[t._v("在计算机程序设计中，弱引用与强引用相对， 是指不能确保其引用的对象不会被垃圾回收器回收的引用。 一个对象若只被弱引用所引用，则被认为是不可访问（或弱可访问）的，并因此可能在任何时刻被回收。 --百度百科")])]),t._v(" "),a("p",[t._v("说的有点弱，用大白话解释，被弱引用的对象可以在"),a("code",[t._v("任何时候被税收")]),t._v("，而对于强引用来说，只要这个强引用存在，那么对象 "),a("code",[t._v("无法被回收")]),t._v("。拿上面的例子来说，map和a一直是强引用关系，在程序结束之前，a所占的内存空间一直不会被释放。")]),t._v(" "),a("p",[t._v("怎么解决这个问题？")]),t._v(" "),a("p",[t._v("很简单，让 map 的 key 和 map 构成弱引用即可。ES6给我们提供了这样的数据结构，它的名字叫"),a("code",[t._v("WeakMap")]),t._v("，它是一种特殊的Map, 其中的"),a("code",[t._v("键是弱引用")]),t._v("的。其键必须是对象，而值可以是任意的。")]),t._v(" "),a("p",[t._v("稍微改造一下即可:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    const deepClone = (target, map = new WeakMap()) => {\n        //...\n    }\n")])])]),a("h4",{attrs:{id:"_3-拷贝特殊对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-拷贝特殊对象"}},[t._v("#")]),t._v(" 3.拷贝特殊对象")]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[t._v("拷贝函数")])]),t._v(" "),a("p",[t._v("虽然函数也是对象，但是它过于特殊，我们单独把它拿出来拆解。\n提到函数，在JS种有两种函数，一种是普通函数，另一种是箭头函数。每个普通函数都是\nFunction的实例，而箭头函数不是任何类的实例，每次调用都是不一样的引用。那我们只需要\n处理普通函数的情况，箭头函数直接返回它本身就好了。\n那么如何来区分两者呢？\n答案是: 利用原型。箭头函数是不存在原型的。\n代码如下:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    const handleFunc = (func) => {\n    // 箭头函数直接返回自身\n    if(!func.prototype) return func;\n    const bodyReg = /(?<={)(.|\\n)+(?=})/m;\n    const paramReg = /(?<=\\().+(?=\\)\\s+{)/;\n    const funcString = func.toString();\n    // 分别匹配 函数参数 和 函数体\n    const param = paramReg.exec(funcString);\n    const body = bodyReg.exec(funcString);\n    if(!body) return null;\n    if (param) {\n        const paramArr = param[0].split(',');\n        return new Function(...paramArr, body[0]);\n    } else {\n        return new Function(body[0]);\n    }\n    }\n\n")])])]),a("p",[t._v("直接放完整代码")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    const getType = obj => Object.prototype.toString.call(obj);\n\n    const isObject = (target) => (typeof target === 'object' || typeof target === 'function') && target !== null;\n\n    const canTraverse = {\n    '[object Map]': true,\n    '[object Set]': true,\n    '[object Array]': true,\n    '[object Object]': true,\n    '[object Arguments]': true,\n    };\n    const mapTag = '[object Map]';\n    const setTag = '[object Set]';\n    const boolTag = '[object Boolean]';\n    const numberTag = '[object Number]';\n    const stringTag = '[object String]';\n    const symbolTag = '[object Symbol]';\n    const dateTag = '[object Date]';\n    const errorTag = '[object Error]';\n    const regexpTag = '[object RegExp]';\n    const funcTag = '[object Function]';\n\n    const handleRegExp = (target) => {\n        const { source, flags } = target;\n        return new target.constructor(source, flags);\n    }\n\n    const handleFunc = (func) => {\n    // 箭头函数直接返回自身\n    if(!func.prototype) return func;\n    const bodyReg = /(?<={)(.|\\n)+(?=})/m;\n    const paramReg = /(?<=\\().+(?=\\)\\s+{)/;\n    const funcString = func.toString();\n    // 分别匹配 函数参数 和 函数体\n    const param = paramReg.exec(funcString);\n    const body = bodyReg.exec(funcString);\n    if(!body) return null;\n    if (param) {\n        const paramArr = param[0].split(',');\n        return new Function(...paramArr, body[0]);\n    } else {\n        return new Function(body[0]);\n    }\n    }\n\n    const handleNotTraverse = (target, tag) => {\n    const Ctor = target.constructor;\n    switch(tag) {\n        case boolTag:\n        return new Object(Boolean.prototype.valueOf.call(target));\n        case numberTag:\n        return new Object(Number.prototype.valueOf.call(target));\n        case stringTag:\n        return new Object(String.prototype.valueOf.call(target));\n        case symbolTag:\n        return new Object(Symbol.prototype.valueOf.call(target));\n        case errorTag: \n        case dateTag:\n        return new Ctor(target);\n        case regexpTag:\n        return handleRegExp(target);\n        case funcTag:\n        return handleFunc(target);\n        default:\n        return new Ctor(target);\n    }\n    }\n\n    const deepClone = (target, map = new WeakMap()) => {\n    if(!isObject(target)) \n        return target;\n    let type = getType(target);\n    let cloneTarget;\n    if(!canTraverse[type]) {\n        // 处理不能遍历的对象\n        return handleNotTraverse(target, type);\n    }else {\n        // 这波操作相当关键，可以保证对象的原型不丢失！\n        let ctor = target.constructor;\n        cloneTarget = new ctor();\n    }\n\n    if(map.get(target)) \n        return target;\n    map.set(target, true);\n\n    if(type === mapTag) {\n        //处理Map\n        target.forEach((item, key) => {\n        cloneTarget.set(deepClone(key, map), deepClone(item, map));\n        })\n    }\n    \n    if(type === setTag) {\n        //处理Set\n        target.forEach(item => {\n        cloneTarget.add(deepClone(item, map));\n        })\n    }\n\n    // 处理数组和对象\n    for (let prop in target) {\n        if (target.hasOwnProperty(prop)) {\n            cloneTarget[prop] = deepClone(target[prop], map);\n        }\n    }\n    return cloneTarget;\n    }\n\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);